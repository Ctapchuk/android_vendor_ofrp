#!/sbin/sh
#
# - Custom script for OrangeFox Recovery
# - "fox_pre_flash" script, for lavender/violet/perseus - to mount system on system_root
# - before flashing zips (apart from ROMs) and unmount after flashing is complete
#
# Copyright (C) 2019-2020 OrangeFox Recovery Project
# This software is licensed under the terms of the GNU General Public
# License version 2, as published by the Free Software Foundation, and
# may be copied, distributed, and modified under those terms.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# See <http://www.gnu.org/licenses/>.
#
# Please maintain this if you use this script or any part of it
#
# * Author: DarthJabba9
# * Date:   20 November 2019
#
LOGFILE=/tmp/recovery.log
DEBUG=0
[ "$DEBUG" = "1" ] && set -o xtrace

DebugMsg() {
   [ "$DEBUG" != "1" ] && return
   echo "DEBUG - OrangeFox [fox_pre_flash]: $@" >> $LOGFILE
}

is_mounted() {
  [ -z "$1" ] && { echo "0"; return; }
  grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
  [ "$?" = "1" ] && echo "0" || echo "1"
}

# check whether the recovery supports SAR, and whether the installed ROM is SAR
is_True_SAR() {
local tmp=0
local F=$(getprop "ro.build.system_root_image" 2>/dev/null)
   [ "$F" != "true" ] && {
      echo "0"
      return
   }
   
   # check whether we can simply mount /system_root
   mount /system_root > /dev/null 2>&1
   F=$(is_mounted "/system_root")
   [ "$F" != "1" ] && {
      echo "0"
      return
   }
   umount /system_root > /dev/null 2>&1
   
   # check for /system/system/
   F=$(is_mounted "/system")
   [ "$F" = "1" ] && tmp=1 || mount -o rw /dev/block/bootdevice/by-name/system /system > /dev/null 2>&1
   F=$(is_mounted "/system")
   [ "$F" = "1" ] && {
      [ -d "/system/system/" ] && echo "1" || echo "0"
      [ "$tmp" = "0" ] && umount /system  > /dev/null 2>&1
      return
   }
   
   # if we get here, return 0
   echo "0"
}

do_mount_system() {
local F=$(is_True_SAR)
   [ "$F" != "1" ] && return

   # Is system already mounted? If so, bail out
   F=$(is_mounted "/system")
   [ "$F" = "1" ] && return
   
   # mount system - if no success, bail out
   mount -o rw /dev/block/bootdevice/by-name/system /system > /dev/null 2>&1
   F=$(is_mounted "/system")
   [ "$F" != "1" ] && return
   
   # do the stuff
   DebugMsg "Mounting system on system_root..."
   mount --move /system /system_root > /dev/null 2>&1
   mount -o bind /system_root/system /system  > /dev/null 2>&1
   DebugMsg "Finished mounting system on system_root"
}

do_unmount_system() {
local F=$(is_True_SAR)
   [ "$F" != "1" ] && return

   DebugMsg "Unmounting system and system_root..."
   F=$(is_mounted "/system_root")
   [ "$F" = "1" ] && {
      umount /system_root > /dev/null 2>&1
   }

   F=$(is_mounted "/system")
   [ "$F" = "1" ] && {
      umount /system > /dev/null 2>&1
   }
   DebugMsg "Finished unmounting system and system_root"
}

#
if [ "$1" = "--unmount" ]; then
   do_unmount_system
else
   do_mount_system
fi
#
