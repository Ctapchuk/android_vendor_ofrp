#!/sbin/sh
#
# Copyright (C) 2019-2020 OrangeFox Recovery Project
#
# This software is licensed under the terms of the GNU General Public
# License version 2, as published by the Free Software Foundation, and
# may be copied, distributed, and modified under those terms.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# See <http://www.gnu.org/licenses/>.
#
# Please maintain this if you use this script or any part of it
#
# - Custom script for OrangeFox Recovery
# - To mount system on system_root before flashing zips (other than ROMs)
# - Author: DarthJabba9
# - Date:   31 May 2020
# - This script should be considered deprecated - it will eventually be removed
#
LOGFILE=/tmp/recovery.log
DEBUG=0
[ "$DEBUG" = "1" ] && set -o xtrace

DebugMsg() {
   echo "DEBUG - OrangeFox [fox_pre_flash]: $@" >> $LOGFILE
}

is_mounted() {
  [ -z "$1" ] && { echo "0"; return; }
  grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
  [ "$?" = "1" ] && echo "0" || echo "1"
}

# do we have system_root?
has_system_root() {
  local F=$(getprop "ro.build.system_root_image" 2>/dev/null)
  local F2=$(getprop "ro.twrp.sar" 2>/dev/null)
  [ "$F" = "true" -o "$F2" = "true" ] && echo "1" || echo "0"
}

do_mount_system() {
local F=$(has_system_root)
   [ "$F" != "1" ] && return
   [ ! -d "/system_root" ] && return

   F=$(is_mounted "/system")
   [ "$F" = "1" ] && return
   
   local SYS_LINK=$(readlink -n "/system" 2>/dev/null)
   [ -n "$SYS_LINK" ] && {
      rm -f /system
      mkdir /system > /dev/null 2>&1
      setprop "orangefox.system.symlink" "$SYS_LINK"
   }

   mount -o rw /dev/block/bootdevice/by-name/system /system > /dev/null 2>&1
   F=$(is_mounted "/system")
   [ "$F" != "1" ] && {
     DebugMsg "- Sorry, I am unable to mount /system. Cleaning up and quitting ..."
     [ -n "$SYS_LINK" ] && {
       setprop --delete "orangefox.system.symlink"
       if [ ! -L "/system" ]; then
          rmdir "/system" > /dev/null 2>&1
          rm -f "/system" > /dev/null 2>&1
          ln -s "$SYS_LINK" "/system" > /dev/null 2>&1
       fi
     }
    return
   }
   
   DebugMsg "- Mounting system on system_root..."
   mount --move /system /system_root > /dev/null 2>&1
   mount -o bind /system_root/system /system  > /dev/null 2>&1
   DebugMsg "- Finished mounting system on system_root"
}

do_unmount_system() {
local F=$(has_system_root)
   [ "$F" != "1" ] && return
   [ ! -d "/system_root" ] && return

   DebugMsg "- Unmounting system on system_root..."

   F=$(is_mounted "/system")
   [ "$F" = "1" ] && umount "/system" > /dev/null 2>&1

   F=$(is_mounted "/system_root")
   [ "$F" = "1" ] && umount "/system_root" > /dev/null 2>&1   

   # check for saved system symlink and restore it
   # there is often a problem with unmounting /system (it is busy)
   F=$(getprop "orangefox.system.symlink")
   if [ -n "$F" ]; then
      setprop --delete "orangefox.system.symlink"
      if [ ! -L "/system" ]; then
         umount "/system" > /dev/null 2>&1
         rmdir "/system" > /dev/null 2>&1
         rm -f "/system"
         ln -s "$F" "/system"
      fi
   fi
   DebugMsg "- Finished unmounting system on system_root"
}

#
if [ "$1" = "--unmount" ]; then
   do_unmount_system
else
   do_mount_system
fi
#
