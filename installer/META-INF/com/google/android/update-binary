#!/sbin/sh

# ******************************************************
# Description: 	Installer script for OrangeFox Recovery
# Author: 	DarthJabba9
# Date: 	TODAY
# ******************************************************

# the target device
TARGET_DEVICE="mido"

# the display screen
SCREEN=/proc/self/fd/$2

# the current zip installer
ZIPFILE="$3"

# the zip extract directory
EX_DIR=/tmp/DJ9

# ui_print "<message>" ["<message 2>" ...]
ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" >> $SCREEN
    shift
  done
}

# is_mounted <partition>
is_mounted() {
  case `mount` in
    *" $1 "*) echo 1;;
    *) echo 0;;
  esac;
}

# package_extract_file <file> <destination_file>
old_package_extract_file() { 
   mkdir -p "$(dirname "$2")"
   unzip -o "$ZIPFILE" "$1" -p > "$2" 
}

# package_extract_dir <dir> <destination_dir>
old_package_extract_dir() {
  for entry in $(unzip -l "$ZIPFILE" "$1/*" 2>/dev/null | tail -n+4 | grep -o " $1.*$" | cut -c2-); do
    outfile=$(echo "$entry" | sed "s|${1}|${2}|")
    mkdir -p "$(dirname "$outfile")"
    unzip -o "$ZIPFILE" "$entry" -p > "$outfile"
  done;
}

package_extract_dir() {
   if [ -d $EX_DIR/$1 ]; then
      cp -a $EX_DIR/$1/* $2
   else
      ui_print "Invalid directory: $1"   
   fi
} 

package_extract_file() {
   if [ -e $EX_DIR/$1 ]; then
      dd if=$EX_DIR/$1 of=$2
   else
      ui_print "Invalid file: $1"   
   fi 
}

# getprop <property>
getprop() { 
   [ -e /sbin/getprop ] && /sbin/getprop $1 || grep "^$1" /default.prop | head -n1 | cut -d= -f2
}

# abort [<message>]
abort() { 
   ui_print "$*"
   exit 1
}

# check if we have specified a target device and whether this is it
CheckRequirements() {
PRODUCT_DEVICE=$(getprop "ro.product.device")
   if [ "$PRODUCT_DEVICE" = "$TARGET_DEVICE" ]; then
     ui_print "- OrangeFox (RELEASE_VER) for $TARGET_DEVICE ..."
   else
     abort "E3004: This package is for $TARGET_DEVICE. This device ($PRODUCT_DEVICE) is not supported."
   fi
}

# mount everything we might need
MountThemAll() {
local F=$(is_mounted "/system")    	
    	[ "$F" = "0" ] &&  mount /system
	mount -o rw,remount /system
	mount -o rw,remount /system /system
	mount -o rw,remount /
	mount -o rw,remount / /
} 

# unmount everything that we mounted
UnMountThemAll() {
	umount /system
}

# unzip the installer package into /tmp
Unzip_Installer_Package() {
   cd /tmp
   mkdir -p $EX_DIR
   cd $EX_DIR
   unzip -o "$ZIPFILE"
}

# main function
Main() {
	ui_print "*************************************"
	ui_print "*** |OrangeFox Recovery Project|  ***"
	ui_print "***   |By The OrangeFox Team|     ***"
	ui_print "*************************************"
	ui_print " "

# check if we have any device requirements
	CheckRequirements

# extract the zip installer
	Unzip_Installer_Package
	
# Install the recovery image
	ui_print "- Installing OrangeFox recovery ..."
	package_extract_file "recovery.img" "/dev/block/bootdevice/by-name/recovery"

# Install /sdcard stuff
	ui_print "- Installing FoxFiles on the internal SD ..."
	mount /sdcard
   	rm -rf "/sdcard/Fox/FoxFiles"
   	rm -f "/sdcard/Fox/.wolfs"
   	package_extract_dir "sdcard" "/sdcard"
   	umount "/sdcard"

# Prevent the stock recovery from replacing this recovery
	ui_print "- Disabling stock recovery overwrites"
	MountThemAll

	RF="/system/etc/install-recovery.sh"
	if [ -f $RF ]; then
	   cp -af $RF /system/etc/install-recovery-sh.bak
	   rm -f $RF
	fi
	
	RF="/system/bin/install-recovery.sh"
	if [ -f $RF ]; then
	   cp -af $RF /system/bin/install-recovery-sh.bak
	   rm -f $RF
	fi
	
	UnMountThemAll

# Finish and reboot
	ui_print "- Finished installing OrangeFox!" 
	ui_print "- Extra files are in /sdcard/Fox/"
	ui_print " "
	ui_print " >> Rebooting to Recovery in 5 seconds ..."
	sleep 1
	ui_print "-5s...."
	sleep 1
	ui_print "-4s...."
	sleep 1
	ui_print "-3s..."
	sleep 1
	ui_print "-2s.."
	sleep 1
	ui_print "-1s."
	sleep 1
	ui_print " "
	ui_print "- Rebooting to Recovery now ..."
	reboot recovery

# if the reboot command fails, try this instead
	sleep 3
	killall recovery

} # end Main(); 

# --
Main
# --
